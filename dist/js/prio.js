(function(){"use strict";var app=angular.module("prio",["prio.values","prio.factory.helpers","prio.factory.storage","prio.service.wunderlist",angularDragula(angular),"ngOrderObjectBy"]),oauthConfig={accessToken:"",accessCode:"",clientID:"16551d4c73904985c4f0",redirectUrl:"http://localhost/git/prio/callback.php",random:"kljdfklshfliaudjfhalsdkjfh43j4dj22223sdf"};document.getElementById("toggle").addEventListener("click",function(e){document.getElementById("tuckedMenu").classList.toggle("custom-menu-tucked");document.getElementById("toggle").classList.toggle("x")});app.controller("AppCtrl",["$scope","dragulaService","wunderlistService","CONSTANTS","$help","$localstorage",function($scope,dragulaService,wunderlistService,CONSTANTS,$help,$localstorage){var tempElement,tempElementsArray,listService,defaultObject;if($help.enableDebugging()){$scope.debug=true}listService=wunderlistService.init(oauthConfig);$scope.login=listService.login;if(!listService.isLoggedIn()){return}listService.loadData();(function setupScope(){$scope.tasks=listService.tasks;$scope.status=listService.status;$scope.date=listService.date;$scope.showOverdue=true;(function setupLocalStorage(){$scope.localData=$localstorage.getObject(CONSTANTS.STORAGE_LOCAL_NAME,defaultObject);if($help.isEmpty($scope.localData)){defaultObject={activeType:1,types:{}};$localstorage.setObject(CONSTANTS.STORAGE_LOCAL_NAME,defaultObject)}})()})();function isDropAllowed(el,target,source,sibling){if(!$help.hasClass(source,CONSTANTS.CLASS_SORTABLE)&&target===source||$help.hasClass(target,CONSTANTS.CLASS_NO_DROP)){return false}return true}function hasOverdueTasks(){var overdueList=document.getElementById(CONSTANTS.ID_TASKS_OVERDUE);return overdueList.firstElementChild}function storeTaskIdLocally(taskId,target){var typeData={},typeId,task={},taskRank,taskSection;typeId=$help.findAncestorByClass(target,CONSTANTS.CLASS_TYPE);typeId=typeId&&parseInt(typeId.attributes[CONSTANTS.ATTR_DATA_TYPE].value,10);taskRank=3;taskSection=parseInt(target.attributes[CONSTANTS.ATTR_DATA_SECTION].value,10);task[taskId]={rank:taskRank,section:taskSection};typeData.types={};typeData.types[typeId]=task;$localstorage.mergeObject(CONSTANTS.STORAGE_LOCAL_NAME,typeData)}function removeTaskIdLocally(taskId,source){var typeId;typeId=$help.findAncestorByClass(source[0],CONSTANTS.CLASS_TYPE);typeId=typeId&&parseInt(typeId.attributes[CONSTANTS.ATTR_DATA_TYPE].value,10);$localstorage.removeFromObject(CONSTANTS.STORAGE_LOCAL_NAME,typeId,taskId)}dragulaService.options($scope,"draggable-tasks",{revertOnSpill:true,accepts:isDropAllowed});$scope.$on("draggable-tasks.drag",function(el,source){tempElement=$help.findAncestorByClass(source[0],CONSTANTS.CLASS_DRAG_CONTAINER);$help.addClass(tempElement,CONSTANTS.CLASS_DRAG_SOURCE);tempElementsArray=tempElement.parentElement.querySelectorAll("["+CONSTANTS.ATTR_DATA_TARGET+"]");var i=0,l=tempElementsArray.length-1,indicator=0;while(i<=l){if(!tempElementsArray[i].classList.contains(CONSTANTS.CLASS_DRAG_SOURCE)&&tempElementsArray[i].hasAttribute(CONSTANTS.ATTR_DATA_TARGET)){tempElementsArray[i].setAttribute(CONSTANTS.ATTR_DATA_TARGET,indicator);indicator+=1}i+=1}});$scope.$on("draggable-tasks.drop",function(e,element,target,source){var newDueDate,taskId,data;target=target[0];newDueDate=target.attributes[CONSTANTS.ATTR_DATA_DATE]||$help.findAncestorByClass(target,CONSTANTS.CLASS_DRAG_CONTAINER).attributes[CONSTANTS.ATTR_DATA_DATE];taskId=element[0].attributes[CONSTANTS.ATTR_TASK_ID].value;if(newDueDate!==undefined&&newDueDate.value!==""&&taskId!==undefined&&taskId.value!==""){data={due_date:newDueDate.value};listService.updateTask(taskId,data);if(!hasOverdueTasks()){$scope.showOverdue=false;$scope.$apply()}if(target.attributes[CONSTANTS.ATTR_DATA_SECTION]){storeTaskIdLocally(taskId,target)}else{removeTaskIdLocally(taskId,source)}}});$scope.$on("draggable-tasks.dragend",function(el){var i=0,l=tempElementsArray.length-1;$help.removeClass(tempElement,CONSTANTS.CLASS_DRAG_SOURCE);while(i<=l){tempElementsArray[i].setAttribute(CONSTANTS.ATTR_DATA_TARGET,"");i+=1}})}])})();(function(){"use strict";var app=angular.module("prio.factory.helpers",[]);app.factory("$help",function(){var helpers=this;helpers.hasClass=function(element,className){if(element){return element.classList.contains(className)}};helpers.addClass=function(element,className){if(element&&!helpers.hasClass(element,className)){element.classList.add(className)}};helpers.removeClass=function(element,className){if(element&&helpers.hasClass(element,className)){element.classList.remove(className)}};helpers.findAncestorByClass=function(element,className){element=element.parentElement;if(element&&!helpers.hasClass(element,className)){element=helpers.findAncestorByClass(element,className)}return element};helpers.isEmpty=function(obj){var prop;for(prop in obj){if(obj.hasOwnProperty(prop)){return false}}return true};helpers.enableDebugging=function(){var parsedUrl=queryString.parse(location.search);if(parsedUrl.debug){console.info("Prio: Debug mode enabled.");helpers.addClass(document.body,"debug-mode");return true}};return helpers})})();(function(){"use strict";angular.module("prio.factory.storage",[]).factory("$localstorage",["$window",function($window){var $localstorage=this;$localstorage.setObject=function(key,value){$window.localStorage[key]=JSON.stringify(value)};$localstorage.getObject=function(key){return JSON.parse($window.localStorage[key]||"{}")};$localstorage.mergeObject=function(key,src,dest){dest=dest||$localstorage.getObject(key);var merged=angular.merge({},dest,src);$localstorage.setObject(key,merged)};$localstorage.removeFromObject=function(key,typeId,taskId){function replacer(property,value){if(parseInt(property,10)===parseInt(typeId,10)&&value[taskId]){delete value[taskId];return value}else{return value}}$window.localStorage[key]=JSON.stringify($localstorage.getObject(key),replacer)};$localstorage.clear=function(){$window.localStorage.clear()};return $localstorage}])})();(function(){"use strict";var app=angular.module("prio.service.wunderlist",[]),WunderlistSDK=window.wunderlist.sdk,wunderlistApiUrl="https://a.wunderlist.com/api/v1/",timeSpan={overdue:"overdue",today:"today",tomorrow:"tomorrow",week:"week",future:"future",unkown:"unkown"};app.service("wunderlistService",["$rootScope","$http",function($rootScope,$http){$rootScope.safeApply=function(fn){var phase=this.$root.$$phase;if(phase==="$apply"||phase==="$digest"){if(fn&&typeof fn==="function"){fn()}}else{this.$apply(fn)}};var WunderlistAPI,wunderlist=this,init,oauthConfig,allLists,allListIds=[],tasksById={},taskIdsByDate=[],status={message:"",code:""},currentDayDates=[],currentTime,updateStatus=function(message,code){status.message=message||"";status.code=code||"";$rootScope.safeApply()},handleError=function(resp,code){var errorMessage;if(resp.error&&resp.error.message){errorMessage=resp.error.message}else{errorMessage=resp}updateStatus(errorMessage,code)},storeAllListIds=function(){angular.forEach(allLists,function(list,key){allListIds[key]=list.id})},setCurrentDayDates=function(currentDay){currentDay=currentDay.getTime();var daySpan=864e5,weekSpan=6048e5;currentDayDates[timeSpan.today]=currentDay;currentDayDates[timeSpan.tomorrow]=currentDay+daySpan;currentDayDates[timeSpan.week]=currentDay+weekSpan},initNewTime=function(){var currentDay=new Date;currentDay.setHours(0,0,0,0);setCurrentDayDates(currentDay)},setCurrentTime=function(override){initNewTime();currentTime=override||currentDayDates[timeSpan.today]},getCurrentness=function(due_date){var taskTime=new Date(due_date),weekSpan=6048e5,daySpan=864e5,timeDiff;taskTime.setHours(24,0,0,0);taskTime.getTime();timeDiff=taskTime-currentTime;if(timeDiff<0){return timeSpan.overdue}else if(timeDiff<daySpan){return timeSpan.today}else if(timeDiff===daySpan){return timeSpan.tomorrow}else if(timeDiff<weekSpan){return timeSpan.week}else if(timeDiff>=weekSpan){return timeSpan.future}else{return timeSpan.unkown}},storeTasksById=function(task){var id=task.id;if(id){if(!tasksById[id]){tasksById[id]=task}}},storeTasksIdsByDate=function(task){var id=task.id,due_date=task.due_date,currentness;if(due_date){currentness=getCurrentness(due_date);if(!taskIdsByDate[currentness]){taskIdsByDate[currentness]=[]}taskIdsByDate[currentness].push(id)}},storeTasks=function(tasks){angular.forEach(tasks,function(task){storeTasksIdsByDate(task);storeTasksById(task)})},loadAllTasks=function(){updateStatus("Loading tasks ...");setCurrentTime();angular.forEach(allListIds,function(id,key){WunderlistAPI.http.tasks.forList(id).done(function(tasksData,statusCode){storeTasks(tasksData);if(key+1===allListIds.length){updateStatus("Loaded tasks successfully",statusCode)}}).fail(handleError)});setCurrentTime(0)},filterLists=function(){storeAllListIds();loadAllTasks()},loadAllLists=function(){updateStatus("Loading lists ...");WunderlistAPI.http.lists.all().done(function(lists,statusCode){updateStatus("Loaded lists successfully",statusCode);allLists=lists;filterLists()}).fail(handleError)},pullCurrentTaskData=function(id){updateStatus("Syncing data ...");$http({method:"GET",url:wunderlistApiUrl+"tasks/"+id,headers:{"X-Access-Token":oauthConfig.accessToken,"X-Client-ID":oauthConfig.clientID,"Content-Type":"application/json"}}).then(function successCallback(response){tasksById[id]=response.data;updateStatus(response.statusText,response.status)},function errorCallback(response){handleError(response.statusText,response.status)})},solveConflicts=function(id){pullCurrentTaskData(id)},sendPatch=function sendPatchR(id,data,tryouts){$http({method:"PATCH",url:wunderlistApiUrl+"tasks/"+id,headers:{"X-Access-Token":oauthConfig.accessToken,"X-Client-ID":oauthConfig.clientID,"Content-Type":"application/json"},data:data}).then(function successCallback(response){pullCurrentTaskData(id);updateStatus(response.statusText,response.status)},function errorCallback(response){if(tryouts!==0&&response.status===409){if(!tryouts){tryouts=2}solveConflicts(id);setTimeout(function(){tryouts-=1;sendPatchR(id,data,tryouts)},2e3)}else{handleError(response.statusText,response.status)}})},updateTask=function(id,data){if(!data){return}data.revision=data.revision||tasksById[id].revision;sendPatch(id,data)};wunderlist.status=status;wunderlist.tasks={tasksById:tasksById,taskIdsByDate:taskIdsByDate};wunderlist.date=currentDayDates;wunderlist.updateTask=updateTask;wunderlist.isLoggedIn=function(){var parsedUrl=queryString.parse(location.search);oauthConfig.accessToken=parsedUrl.access_token;return oauthConfig.accessToken?true:false};wunderlist.login=function(){window.location.href="https://www.wunderlist.com/oauth/authorize?client_id="+oauthConfig.clientID+"&redirect_uri="+oauthConfig.redirectUrl+"&state="+oauthConfig.random};wunderlist.loadData=function(){if(!wunderlist.isLoggedIn){return}WunderlistAPI=new WunderlistSDK(oauthConfig);WunderlistAPI.initialized.done(function(){loadAllLists()})};init=function(config){oauthConfig=config;return wunderlist};return{init:init}}])})();(function(){"use strict";angular.module("prio.values",[]).value("CONSTANTS",{STORAGE_LOCAL_NAME:"prio",ID_TASKS_OVERDUE:"tasks-overdue",CLASS_DRAG_SOURCE:"drag-source",CLASS_DRAG_CONTAINER:"drag-container",CLASS_NO_DROP:"no-drop",CLASS_SORTABLE:"sortable",CLASS_OVERDUE:"tasks-overdue",CLASS_TYPE:"prio-type",ATTR_DATA_TARGET:"data-drop-zone",ATTR_DATA_DATE:"data-list-date",ATTR_DATA_TYPE:"data-list-type",ATTR_DATA_SECTION:"data-list-section",ATTR_TASK_ID:"data-task-id"})})();